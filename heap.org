#+TITLE: [[https://www.programiz.com/dsa/heap-data-structure][Heap]]

* Table of contents :TOC_2:
- [[#implementation][Implementation]]
- [[#complexities][Complexities]]
  - [[#time][Time]]
  - [[#space][Space]]

* Implementation
#+begin_src python :session :results output
class Heap:
    @classmethod
    def _heapify_helper(cls, arr, i):
        n = len(arr)
        largest = i
        l = 2 * i + 1
        r = 2 * i + 2

        if l < n and arr[i] < arr[l]:
            largest = l

        if r < n and arr[largest] < arr[r]:
            largest = r

        if largest != i:
            arr[i], arr[largest] = arr[largest], arr[i]
            cls._heapify_helper(arr, largest)

    @classmethod
    def heapify(cls, arr):
        """Turn array into heap."""
        n = len(arr)
        for i in range(n // 2 - 1, -1, -1):
            cls._heapify_helper(arr, i)

    @classmethod
    def insert(cls, arr, num):
        """Insert element."""
        arr.append(num)
        n = len(arr)
        if n == 1:
            return
        parent = (n - 2) // 2
        while parent > 0:
            cls._heapify_helper(arr, parent)
            parent = (parent - 1) // 2

    @classmethod
    def pop(cls, arr):
        """Pop element from the top."""
        tmp = arr[0]
        arr[0], arr[-1] = arr[-1], arr[0]
        arr.pop()
        cls._heapify_helper(arr, 0)
        return tmp

    @classmethod
    def delete(cls, arr, num):
        """Delete element by value."""
        i = arr.index(num)
        arr[i], arr[-1] = arr[-1], arr[i]
        arr.pop()
        cls._heapify_helper(arr, i)

    @staticmethod
    def peek(arr):
        """Peek at top element."""
        return arr[0]


a = [3, 9, 2, 1, 4, 5]
Heap.heapify(a)
print(f"Array: {a}")
Heap.insert(a, 7)
print(f"Insert 7: {a}")
Heap.delete(a, 7)
print(f"Delete 7: {a}")
Heap.pop(a)
print(f"Pop: {a}")
#+end_src

#+RESULTS:
: Array: [9, 4, 5, 1, 3, 2]
: Insert 7: [9, 4, 7, 1, 3, 2, 5]
: Delete 7: [9, 4, 5, 1, 3, 2]
: Pop: [5, 4, 2, 1, 3]

* Complexities
** Time
| Operation | Average Case | Worst Case  |
|-----------+--------------+-------------|
| Heapify   | O(n log(n))  | O(n log(n)) |
| Insert    | O(log n)     | O(log n)    |
| Pop       | O(log n)     | O(log n)    |
| Delete    | O(n)         | O(n)        |
| Peek      | O(1)         | O(1)        |
Where ~n~ is the length of the array.
We assume, that the input for ~Heapify~ operation is arbitrary
array but the input for other operations is heapified array

** Space
The space complexity for all the operations is ~O(n)~,
where ~n~ is the the length of the array

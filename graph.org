#+TITLE: [[https://www.programiz.com/dsa/graph][Graph]]

A graph data structure is a collection of nodes that have
data and are connected to other nodes. More precisely, a
graph is a data structure ~(V, E)~ that consists of:
- A collection of vertices ~V~
- A collection of edges ~E~, represented as ordered pairs
  of vertices ~(u, v)~


* Table of contents :TOC_2:
- [[#adjacency-list][Adjacency list]]
- [[#adjacency-matrix][Adjacency matrix]]
- [[#search][Search]]
  - [[#depth-first][Depth-first]]
  - [[#breadth-first][Breadth-first]]
- [[#find-shortest-path][Find shortest path]]
  - [[#dijkstras-algorithm][Dijkstra's algorithm]]
  - [[#bellman-fords-algorithm][Bellman Ford's algorithm]]
- [[#tarjans-algorithm][Tarjan's algorithm]]
  - [[#implementation][Implementation]]
  - [[#complexities][Complexities]]
- [[#topolgical-sort][Topolgical sort]]
  - [[#implementation-1][Implementation]]
  - [[#complexities-1][Complexities]]
- [[#disjoint-set-union][Disjoint Set Union]]
  - [[#implementation-2][Implementation]]
  - [[#complexities-2][Complexities]]

* [[https://www.programiz.com/dsa/graph-adjacency-list][Adjacency list]]
* [[https://www.programiz.com/dsa/graph-adjacency-matrix][Adjacency matrix]]
* Search
** [[https://www.programiz.com/dsa/graph-dfs][Depth-first]]
*** Implementation
#+begin_src python :results output
def dfs(graph, n, visited):
    visited.add(n)
    print(n, end=" ")
    for nei in graph[n]:
        if not nei in visited:
            dfs(graph, nei, visited)


g = [[1, 2], [2], [0]]
dfs(g, 0, set())
#+end_src

#+RESULTS:
: 0 1 2

**** White-gray-black
Detect cycles in a directed graph

#+begin_src python :session :results output
WHITE, GRAY, BLACK = 0, 1, 2 # unvisited, processing, safe


def dfs(graph, u):
    if colors[u] != WHITE:
        return colors[u] == BLACK
    colors[u] = GRAY
    for v in graph[u]:
        if colors[v] == GRAY or not dfs(graph, v):
            return False
    colors[u] = BLACK
    return True


g = [[1, 2], [3], [], [0]]
n = len(g)
colors = [0] * n
print([dfs(g, i) for i in range(n)])
#+end_src

#+RESULTS:
: [False, False, True, False]

*** Complexities
**** Time
Time complexity is ~O(V + E)~ where ~V~ is the number of vertices and ~E~ is the number of edges

**** Space
Space complexity is ~O(V)~ where ~V~ is the number of vertices


** [[https://www.programiz.com/dsa/graph-bfs][Breadth-first]]
*** Implementation
#+begin_src python :results output
from collections import deque


def bfs(graph, n):
    visited, q = set([n]), deque([n])
    while q:
        v = q.popleft()
        print(v, end=" ")
        for nei in graph[v]:
            if nei not in visited:
                visited.add(nei)
                q.append(nei)


g = [[1, 2], [2], [0]]
bfs(g, 0)
#+end_src

#+RESULTS:
: 0 1 2

*** Complexities
**** Time
Time complexity is ~O(V + E)~ where ~V~ is the number of vertices and ~E~ is the number of edges

**** Space
Space complexity is ~O(V)~ where ~V~ is the number of vertices

**** White-gray-black


* Find shortest path
** [[https://www.programiz.com/dsa/dijkstra-algorithm][Dijkstra's algorithm]]
*** Using heap
#+begin_src python :results output
from heapq import heappop, heappush


def dijkstra(graph, fr, to):
    q, visited, costs = [(0, fr, [])], set(), {fr: 0}
    while q:
        cost, u, path = heappop(q)
        if u in visited:
            continue
        visited.add(u)
        path.append(u)
        if u == to:
            return cost, path
        for c, v in graph[u]:
            if v in visited:
                continue
            pc = costs.get(v, float("inf"))
            nc = cost + c
            if nc < pc:
                costs[v] = nc
                heappush(q, (nc, v, path))
    return float("inf"), None


g = [[(6, 1), (2, 2)], [(2, 3)], [(3, 1), (7, 3)], []]
cost, path = dijkstra(g, 0, 3)
print(f"{cost=}, {path=}")
#+end_src

#+RESULTS:
: cost=7, path=[0, 2, 1, 3]

** [[https://www.programiz.com/dsa/bellman-ford-algorithm][Bellman Ford's algorithm]]
* Tarjan's algorithm
Find strongly connected components in a graph

** Implementation
*** Directed
#+begin_src python :session :results output
def tarjan(g):
    n = len(g)
    c = 0
    ids = [None] * n
    low = [None] * n
    stack = []
    on_stack = [False] * n

    def dfs(u):
        nonlocal c
        on_stack[u] = True
        stack.append(u)
        ids[u] = low[u] = c
        c += 1
        for v in g[u]:
            if ids[v] is None:
                dfs(v)
            if on_stack[v]:
                low[u] = min(low[u], low[v])
        while ids[u] == low[u] and stack:
            v = stack.pop()
            on_stack[v] = False
            low[v] = ids[u]
            if v == u:
                break

    for i in range(n):
        if ids[i] is None:
            dfs(i)

    return low


g = [[1], [2], [0], [4, 7], [5], [0, 6], [0, 2, 4], [3, 5]]
print(tarjan(g))
#+end_src

#+RESULTS:
: [0, 0, 0, 3, 4, 4, 4, 3]

*** Undirected
#+begin_src python :session :results output
def tarjan(g):
    n = len(g)
    p = [None] * n
    ids = [None] * n
    low = [None] * n
    c = 0

    def dfs(u):
        nonlocal c
        ids[u] = low[u] = c
        c += 1
        for v in g[u]:
            if ids[v] is None:
                p[v] = u
                dfs(v)
            if ids[v] is None or v != p[u]:
                low[u] = min(low[u], low[v])

    dfs(0)
    return low


g = [[1, 2], [0, 2, 3], [0, 1], [1]]
print(tarjan(g))
#+end_src

#+RESULTS:
: [0, 0, 0, 3]

** Complexities
*** Time
Time complexity is ~O(V + E)~ where ~V~ is the number of vertices and ~E~ is the number of edges

*** Space
Space complexity is ~O(V)~ where ~V~ is the number of vertices

* [[https://leetcode.com/discuss/general-discussion/1078072/introduction-to-topological-sort][Topolgical sort]]
** Implementation
*** DFS
#+begin_src python :results output
from collections import deque


def ts(graph):
    n = len(graph)
    res = deque()
    visited = set()
    def dfs(i):
        visited.add(i)
        for nei in graph[i]:
            if nei not in visited:
                dfs(nei)
        res.appendleft(graph[i])
    for u in range(n):
        if u not in visited:
            dfs(u)
    return list(res)


g = [[1], [], [0, 1]]
print(ts(g))
#+end_src

#+RESULTS:
: [[0, 1], [1], []]

*** BFS
#+begin_src python :results output
from collections import deque


def ts(graph):
    n = len(graph)
    res = []
    indegrees = [0] * n
    q = deque()
    for neighbours in graph:
        for nei in neighbours:
            indegrees[nei] += 1
    for i, ind in enumerate(indegrees):
        if ind == 0:
            q.append(i)
            res.append(graph[i])
    while q:
        u = q.popleft()
        for v in graph[u]:
            indegrees[v] -= 1
            if indegrees[v] == 0:
                q.append(v)
                res.append(graph[v])
    return res


g = [[1], [], [0, 1]]
print(ts(g))
#+end_src

#+RESULTS:
: [[0, 1], [1], []]

** Complexities
*** Time
Time complexity is ~O(V + E)~ where ~V~ is the number of vertices and ~E~ is the number of edges

*** Space
Space complexity is ~O(V)~ where ~V~ is the number of vertices
* Disjoint Set Union
** Implementation
#+begin_src python :session :results output
from collections import defaultdict


class DSU:
    def __init__(self):
        self.p = {}

    def find(self, x):
        """Find parent element of the group"""
        if self.p[x] != x:
            self.p[x] = self.find(self.p[x])
        return self.p[x]

    def union(self, x, y):
        """Merge two groups"""
        self.p.setdefault(x, x)
        self.p.setdefault(y, y)
        xp, yp = self.find(x), self.find(y)
        if xp != yp:
            self.p[xp] = yp

    @property
    def groups(self):
        """Return all groups"""
        groups = defaultdict(list)
        for k in self.p.keys():
            groups[self.find(k)].append(k)
        return groups


dsu = DSU()
dsu.union(1, 0)
dsu.union(4, 3)
print(dsu.groups)
dsu.union(3, 0)
print(dsu.groups)
dsu.union(2, 5)
dsu.union(5, 0)
print(dsu.groups)
#+end_src

#+RESULTS:
: defaultdict(<class 'list'>, {0: [1, 0], 3: [4, 3]})
: defaultdict(<class 'list'>, {0: [1, 0, 4, 3]})
: defaultdict(<class 'list'>, {0: [1, 0, 4, 3, 2, 5]})

** Complexities
*** Time
| Operation | Average Case | Worst Case  |
|-----------+--------------+-------------|
| Find      | O(log n)     | O(log n)    |
| Union     | O(log n)     | O(log n)    |
| Groups    | O(n log(n))  | O(n log(n)) |
Where ~n~ is the number of elements

*** Space
The space complexity for all the operations is ~O(n)~, where ~n~ is the number of elements

#+TITLE: Array

* Table of contents :TOC_2:
- [[#binary-search][Binary Search]]
- [[#permutations][Permutations]]
- [[#combinations][Combinations]]
- [[#quickselect][Quickselect]]
  - [[#implementation][Implementation]]
  - [[#complexities][Complexities]]

* [[https://www.programiz.com/dsa/binary-search][Binary Search]]
- [[https://leetcode.com/problems/binary-search/][Problem]]

* Permutations
#+begin_example
[1, 2, 3] -> [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2)]
#+end_example

* Combinations
#+begin_example
[1, 2, 3], 3 -> [(1, 2, 3)]
[1, 2, 3], 2 -> [(1, 2), (1, 3), (2, 3)]
[1, 2, 3], 1 -> [(1,), (2), (3,)]
#+end_example

* Quickselect
** Implementation
#+begin_src python :results output
def quickselect(nums, k, l, r):
    pivot, p = nums[r], l
    for i in range(l, r):
        if nums[i] <= pivot:
            nums[i], nums[p] = nums[p], nums[i]
            p += 1
    nums[p], nums[r] = pivot, nums[p]
    if p > k:
        return quickselect(nums, k, l, p - 1)
    if p < k:
        return quickselect(nums, k, p + 1, r)
    return nums[p]


nums, k = [3, 2, 1, 5, 6, 4], 2
n = len(nums)
print(quickselect(nums, k - 1, 0, n - 1))
#+end_src

#+RESULTS:
: 2

** Complexities
*** Time
| Average case | Worst Case |
|--------------+------------|
| O(n)         | O(n ^ 2)   |
Where ~n~ is the number of elements in a list

*** Space
Space complexity is ~O(n)~ where n is the number of elements in a list

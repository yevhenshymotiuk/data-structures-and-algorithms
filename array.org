#+TITLE: Array

* Table of contents :TOC_2:
- [[#permutations][Permutations]]
- [[#combinations][Combinations]]
- [[#binary-search][Binary Search]]
- [[#sorting][Sorting]]
  - [[#selection-sort][Selection sort]]
  - [[#bubble-sort][Bubble sort]]
  - [[#insertion-sort][Insertion sort]]
  - [[#counting-sort][Counting sort]]
  - [[#quicksort][Quicksort]]
  - [[#merge-sort][Merge sort]]
  - [[#bucket-sort][Bucket sort]]
- [[#quickselect][Quickselect]]
  - [[#implementation][Implementation]]
  - [[#complexities][Complexities]]

* Permutations
#+begin_example
[1, 2, 3] -> [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2)]
#+end_example

* Combinations
#+begin_example
[1, 2, 3], 3 -> [(1, 2, 3)]
[1, 2, 3], 2 -> [(1, 2), (1, 3), (2, 3)]
[1, 2, 3], 1 -> [(1,), (2), (3,)]
#+end_example

* [[https://www.programiz.com/dsa/binary-search][Binary Search]]
- [[https://leetcode.com/problems/binary-search/][Problem]]

* Sorting
** Selection sort
*** Implementation
#+begin_src python :results output
def selection_sorted(nums):
    n = len(nums)
    return [nums.pop(min(range(n - i), key=lambda x: nums[x])) for i in range(n)]


nums = [5, 2, 3, 0, 4, 1]
print(selection_sorted(nums))
#+end_src

#+RESULTS:
: [0, 1, 2, 3, 4, 5]

*** Complexities
**** Time
Time complexity is ~O(n ^ 2)~ where ~n~ is the number of elements is the list

**** Space
Space complexity is ~O(n)~ where ~n~ is the number of elements in the list

** Bubble sort
*** Implementation
#+begin_src python :results output
def bubble_sorted(nums):
    n, flag = len(nums), True
    while flag:
        flag = False
        for i in range(n - 1):
            if nums[i] > nums[i + 1]:
                nums[i], nums[i + 1], flag = nums[i + 1], nums[i], True
    return nums


nums = [5, 2, 3, 0, 4, 1]
print(bubble_sorted(nums))
#+end_src

#+RESULTS:
: [0, 1, 2, 3, 4, 5]

*** Complexities
**** Time
Time complexity is ~O(n ^ 2)~ where ~n~ is the number of elements is the list

**** Space
Space complexity is ~O(1)~

** Insertion sort
*** Implementation
#+begin_src python :results output
def insertion_sorted(nums):
    n = len(nums)
    for i in range(1, n):
        num = nums[i]
        j = i - 1
        while j >= 0 and nums[j] > num:
            nums[j + 1] = nums[j]
            j -= 1
        nums[j + 1] = num
    return nums


nums = [5, 2, 3, 0, 4, 1]
print(insertion_sorted(nums))
#+end_src

#+RESULTS:
: [0, 1, 2, 3, 4, 5]

*** Complexities
**** Time
Time complexity is ~O(n ^ 2)~ where ~n~ is the number of elements is the list

**** Space
Space complexity is ~O(1)~

** Counting sort
*** Implementation
#+begin_src python :results output
from collections import Counter


def counting_sorted(nums):
    counter, mi, ma, res = Counter(nums), min(nums), max(nums), []
    for num in range(mi, ma + 1):
        res.extend([num] * counter[num])
    return res


nums = [5, 2, 3, 0, 4, 1]
print(counting_sorted(nums))
#+end_src

#+RESULTS:
: [0, 1, 2, 3, 4, 5]

*** Complexities
**** Time
Time complexity is ~O(n + k)~ where ~n~ is the number of elements is the list and ~k~ is the statistical range of the dataset

**** Space
Space complexity is ~O(n)~ where ~n~ is the number of elements is the list

** Quicksort
*** Implementation
#+begin_src python :results output
def quicksorted(nums):
    def do_quicksorted(nums, l, r):
        if l >= r:
            return
        p = partition(nums, l, r)
        do_quicksorted(nums, l, p - 1)
        do_quicksorted(nums, p + 1, r)

    def partition(nums, l, r):
        pivot, p = nums[r], l
        for i in range(l, r):
            if nums[i] <= pivot:
                nums[i], nums[p] = nums[p], nums[i]
                p += 1
        nums[p], nums[r] = pivot, nums[p]
        return p

    n = len(nums)
    do_quicksorted(nums, 0, n - 1)
    return nums


nums = [5, 2, 3, 0, 4, 1]
print(quicksorted(nums))
#+end_src

#+RESULTS:
: [0, 1, 2, 3, 4, 5]

*** Complexities
**** Time
| Average Case | Worst Case |
|--------------+------------|
| O(n log(n))  | O(n ^ 2)   |
Where ~n~ is the number of elements is the list

**** Space
Space complexity is ~O(1)~

** Merge sort
*** Implementation
#+begin_src python :results output
def mergesorted(nums):
    def merge(left, right):
        ln, rn = len(left), len(right)
        merged = []
        i = j = 0
        while i < ln and j < rn:
            if left[i] <= right[j]:
                merged.append(left[i])
                i += 1
            else:
                merged.append(right[j])
                j += 1
        return merged + (left[i:] if j == rn else right[j:])

    n = len(nums)
    if n == 1:
        return nums
    mid = n // 2
    left, right = mergesorted(nums[:mid]), mergesorted(nums[mid:])
    return merge(left, right)


nums = [5, 2, 3, 0, 4, 1]
print(mergesorted(nums))
#+end_src

#+RESULTS:
: [0, 1, 2, 3, 4, 5]

*** Complexities
**** Time
Time complexity is ~O(n log(n))~ where ~n~ is the number of elements is the list

**** Space
Space complexity is ~O(n)~

** Bucket sort
*** Implementation
#+begin_src python :results output
def bucket_sorted(nums):
    def insertion_sorted(nums):
        n = len(nums)
        for i in range(1, n):
            num = nums[i]
            j = i - 1
            while j >= 0 and nums[j] > num:
                nums[j + 1] = nums[j]
                j -= 1
            nums[j + 1] = num
        return nums

    mi = min(nums)
    k = max(nums) - mi
    m = int(k ** 1 / 2)
    buckets = [[] for _ in range(m)]
    res = []
    if k == 0:
        return nums
    for num in nums:
        buckets[(m - 1) * (num - mi) // k].append(num)
    for bucket in buckets:
        res.extend(insertion_sorted(bucket))
    return res


nums = [5, 2, 3, 0, 4, 1]
print(bucket_sorted(nums))
#+end_src

#+RESULTS:
: [0, 1, 2, 3, 4, 5]

*** Complexities
**** Time
| Average Case | Worst Case |
|--------------+------------|
| O(n)         | O(n ^ 2)   |
Where ~n~ is the number of elements is the list

**** Space
Space complexity is ~O(n)~

* Quickselect
** Implementation
#+begin_src python :results output
def quickselect(nums, k, l, r):
    pivot, p = nums[r], l
    for i in range(l, r):
        if nums[i] <= pivot:
            nums[i], nums[p] = nums[p], nums[i]
            p += 1
    nums[p], nums[r] = pivot, nums[p]
    if p > k:
        return quickselect(nums, k, l, p - 1)
    if p < k:
        return quickselect(nums, k, p + 1, r)
    return nums[p]


nums, k = [3, 2, 1, 5, 6, 4], 2
n = len(nums)
print(quickselect(nums, k - 1, 0, n - 1))
#+end_src

#+RESULTS:
: 2

** Complexities
*** Time
| Average Case | Worst Case |
|--------------+------------|
| O(n)         | O(n ^ 2)   |
Where ~n~ is the number of elements in a list

*** Space
Space complexity is ~O(n)~ where ~n~ is the number of elements in a list

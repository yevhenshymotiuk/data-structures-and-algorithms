#+TITLE: String

* Table of contents :TOC_2:
- [[#knuth-morris-pratt][Knuth-Morris-Pratt]]
  - [[#implementation][Implementation]]
  - [[#complexity][Complexity]]
- [[#rabin-karp][Rabin-Karp]]
  - [[#implementation-1][Implementation]]
  - [[#complexity-1][Complexity]]

* Knuth-Morris-Pratt
** Implementation
#+begin_src python :results output
def kmp(s, p):
    if not p:
        return 0
    m, n = len(p), len(s)
    lps = [0] * m
    # build lps list
    prev, i = 0, 1
    while i < m:
        if p[i] == p[prev]:
            lps[i] = prev + 1
            prev += 1
            i += 1
        elif prev == 0:
            lps[i] = 0
            i += 1
        else:
            prev = lps[prev - 1]
    # use lps list to find a match
    i = j = 0
    while i < n:
        if s[i] == p[j]:
            i += 1
            j += 1
        else:
            if j == 0:
                i += 1
            else:
                j = lps[j - 1]
        if j == m:
            return i - m
    return -1


print(kmp("hello", "ll"))
#+end_src

#+RESULTS:
: 2

** Complexity
*** Time
Time complexity is ~O(M + N)~ where ~M~ is the length of a pattern and ~N~ is the length of a string. ~M + N~ is the case when ~M > N~, so it is possible to reach ~O(2N) == O(N)~ complexity by skipping such cases

*** Space
Space complexity is ~O(M)~ where ~M~ is the length of the pattern

* Rabin-Karp
** Implementation
#+begin_src python :results output
def rk(s, p):
    if not p:
        return 0
    m, n = len(p), len(s)
    base = 128
    mod = 131

    def h(s, l, r):
        v = 0
        for i in range(l, r):
            v = (ord(s[i]) + v * base) % mod
        return v

    th = h(p, 0, m)
    ch = h(s, 0, m - 1)
    first_pow = base ** (m - 1)
    for i in range(m - 1, n):
        ch = (ch * base + ord(s[i])) % mod
        if ch == th and p == s[i - m + 1 : i + 1]:
            return i - m + 1
        ch = (ch - ord(s[i - m + 1]) * first_pow) % mod
    return -1


print(rk("hello", "ll"))
#+end_src

#+RESULTS:
: 2

** Complexity
*** Time
| Average Case | Worst Case |
|--------------+------------|
| O(M + N)     | O(MN)      |
Where ~M~ is the length of a pattern and ~N~ is the length of a string.
Worst case occurs when all characters of both the string and the pattern are same as the hash values of all substrings of the string match with the hash value of the pattern

*** Space
Space complexity is ~O(1)~
